:q
quit
exit
scoreWords ["sport", "good", "bad"]
scoreWords = map scoreWord
scoreWord "sport"
scoreWord w = sum $ map letterToNum w
letterToNum 'z'
letterToNum 'a'
letterToNum x = ord(x) - ord('a') + 1
ord('a')
import Data.Char
:q
:q
grep -r "8.0.2"
exit
:q
:q
:q
:main --match=Course.List/
:q
:q
:q
:q
:q
q
:Q
group $ sort $ map parseNucleotide "REDFOAX"
group $ sort $ map parseNucleotide "REDFOX"
group $ sort $ map parseNucleotide s
group $ sort $ map parseNucleotide s
sort $ map parseNucleotide s
map parseNucleotide s
s
parseNucleotide '9'
parseNucleotide _
parseNucleotide 'A'
:}
  where nuc = Map.lookup s $ Map.fromList [('A', A), ('G', G), ('C', C), ('T', T)]
    otherwise -> Left ([s] ++ " not a nucleotide")
    Just n -> Right n
parseNucleotide s = case nuc of
parseNucleotide :: Char -> Either String Nucleotide
:{
:}
  where nuc = Map.lookup s $ Map.fromList [('A', A), ('G', G), ('C', C), ('T', T)]
    otherwise -> Left ([s] ++ " not a nucleotide")
    Just nuc -> Just nuc
parseNucleotide s = case nuc of
parseNucleotide :: Char -> Either String Nucleotide
:{
:}
  where nuc = Map.lookup s $ Map.fromList [('A', A), ('G', G), ('C', C), ('T', T)]
    otherwise -> Left ([c] ++ " not a nucleotide")
    Just nuc -> Just nuc
parseNucleotide s = case nuc of
parseNucleotide :: Char -> Either String Nucleotide
:{
parseNucleotide 'A'
type Result = Either Nucleotide String
Result = Either Nucleotide String
parseNucleotide 'A'
parseNucleotide s = Map.lookup s $ Map.fromList [('A', A), ('G', G), ('C', C), ('T', T)] 
parseNucleotide s = Map.lookup s Map.fromList [('A', A), ('G', G), ('C', C), ('T', T)] 
parseNucleotide s = Map.fromList [('A', A), ('G', G), ('C', C), ('T', T)] s
parseNucleotide 'A'
parseNucleotide s = Map.fromList [('A', A), ('G', G), ('C', C), ('T', T)]
parseNucleotide s = Map.fromList
:}
                'T' -> T
                'G' -> G
                'C' -> C
                'A' -> A
                 return $ case s of
parseNucleotide s = do s <- oneOf "ACGT"
parseNucleotide :: Char -> Nucleotide
:{
:}
                'T' -> T
                'G' -> G
                'C' -> C
                'A' -> A
                 return $ case s of
parseNucleotide s = do s <- oneOf "ACGT"
parseNucleotide :: Char -> Nucleotide
:{
:}
                'T' -> T
                'G' -> G
                'C' -> C
                'A' -> A
               return $ case s of
parseNucleotide s = do s <- oneOf "ACGT"
parseNucleotide :: Char -> Nucleotide
:{
                'G' -> G
                'C' -> C
                'A' -> A
               return $ case s of
parseNucleotide = do s <- oneOf "ACGT"
